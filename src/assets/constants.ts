type QUANT_TYPE = {
    [index: string]: number;
};

type DIFF_TYPE = {
    name: string;
    diff: number;
};

type ALTER_TYPE = {
    [index: number]: DIFF_TYPE;
};

type ING_TYPE = {
    [index: string]: ALTER_TYPE;
};

export const MAX: number = 9;

export const INGREDIENTS: ING_TYPE = {
    "melted butter": {
        1: { name: "avocado", diff: 1 },
        2: { name: "mayonnaise", diff: 1 },
        3: { name: "olive oil", diff: 1 },
        4: { name: "vegan butter", diff: 2 },
        5: { name: "Ghee", diff: 2 },
        6: { name: "Lard", diff: 2 },
        7: { name: "Sesame seeds", diff: 2 },
        8: { name: "melted butter", diff: 1 },
    },
    "cocoa powder": {
        1: { name: "dark chocolate", diff: 1 },
        2: { name: "milk chocolate", diff: 1 },
        3: { name: "dates", diff: 2 },
        4: { name: "matcha powder", diff: 3 },
        5: { name: "coffee", diff: 1 },
        6: { name: "strawberry nesquick", diff: 3 },
        7: { name: "turmeric", diff: 2 },
        8: { name: "potting soil", diff: 2 },
    },
    "white sugar": {
        1: { name: "white sugar", diff: 1 },
        2: { name: "brown sugar", diff: 1 },
        3: { name: "cane sugar", diff: 2 },
        4: { name: "honey", diff: 1 },
        5: { name: "agave", diff: 2 },
        6: { name: "pixie sticks", diff: 1 },
        7: { name: "ketchup manis", diff: 2 },
        8: { name: "Artificial sweetner", diff: 2 },
    },
    eggs: {
        1: { name: "banana", diff: 1 },
        2: { name: "soaked chia seeds", diff: 2 },
        3: { name: "your favourite yogurt", diff: 1 },
        4: { name: "blocks of tofu", diff: 1 },
        5: { name: "cups of aquafaba", diff: 3 },
        6: { name: "xantham gum", diff: 3 },
        7: { name: "buttermilk", diff: 2 },
        8: { name: "eggs", diff: 1 },
    },
    "vanilla extract": {
        1: { name: "rose extract", diff: 3 },
        2: { name: "almond extract", diff: 3 },
        3: { name: "maple syrup", diff: 2 },
        4: { name: "liquid smoke", diff: 3 },
        5: { name: "pumpkin spice", diff: 2 },
        6: { name: "hot sauce", diff: 2 },
        7: { name: "matcha tea", diff: 3 },
        8: { name: "vanilla extract", diff: 1 },
    },
    "all purpose flour": {
        1: { name: "chickpea flour", diff: 2 },
        2: { name: "sorghum", diff: 3 },
        3: { name: "coconut flour", diff: 3 },
        4: { name: "rice flour", diff: 2 },
        5: { name: "mashed potato", diff: 1 },
        6: { name: "almond flour", diff: 2 },
        7: { name: "tapioca flour", diff: 2 },
        8: { name: "all purpose flour", diff: 1 },
    },
    "iodized salt": {
        1: { name: "dried garlic", diff: 1 },
        2: { name: "dried ginger", diff: 1 },
        3: { name: "vinegar", diff: 1 },
        4: { name: "black pepper powder", diff: 1 },
        5: { name: "anchovy paste", diff: 3 },
        6: { name: "soy sauce", diff: 2 },
        7: { name: "Bouillon powder", diff: 3 },
        8: { name: "iodized salt", diff: 1 },
    },
    "21 min": {
        1: { name: "30 min", diff: 1 },
        2: { name: "45 min", diff: 1 },
        3: { name: "7 years 2 days 3.75 hours 34 sec", diff: 300 },
        4: { name: "9 months", diff: 3 },
        5: { name: "82 min", diff: 1 },
        6: { name: "21 min", diff: 2 },
        7: { name: "2 min 47 sec", diff: 1 },
        8: { name: "100 min", diff: 1 },
    },
};

// If you get more key values
const QUANT_KEYS: QUANT_TYPE = {
    "0x0": 0, //"0000",
    "0x1": 1, //"0001",
    "0x2": 10, //"0010",
    "0x3": 11, //"0011",
    "0x5": 101, //"0101",
    "0x7": 111, //"0111",
};

// change this
const DATA: string[] = [
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x5",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x5",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x2",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x2",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x0",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x1",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x7",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x2",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x1",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x2",
    "0x0",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x1",
    "0x0",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x2",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x1",
    "0x1",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x1",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x1",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x0",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x2",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x0",
    "0x3",
    "0x2",
    "0x3",
    "0x1",
    "0x1",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x2",
    "0x1",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x7",
    "0x2",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x7",
    "0x3",
    "0x3",
    "0x3",
    "0x1",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
    "0x3",
];

export const NUMBERS: number[] = DATA.map((d: string) => QUANT_KEYS[d]);

export const getRandomInt = (
    min: number = 1,
    max: number,
    runs: number
): number => {
    let value = 1;
    for (let i = 0; i < runs; i++) {
        value = Math.floor(Math.random() * (max - min) + min);
    }
    return value;
};

export const ChipItems: string[] = [
    "Brownie",
    "Cookies",
    "Ice cream",
    "Pancakes",
    "Pasta",
    "Pizza",
    "Sandwiches",
    "Smoothies",
];
